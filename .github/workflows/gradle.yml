# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle


on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test


  unit-tests:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Run test with Gradle
        run: ./gradlew test
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
            name: Test Results
            path: "**/build/test-results/test/**/*.xml"


  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build the stack
        run:  docker-compose -f ./docker/docker-compose.yaml up -d
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Run tests with Gradle
        run: ./gradlew integrationTest
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
            name: Test Results
            path: "**/build/test-results/integrationTest/**/*.xml"


  end-to-end-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build the stack
        run:  docker-compose -f ./docker/docker-compose.yaml up -d
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: --cwd ./client install # will run `yarn install` command
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: --cwd ./client start & # will run `yarn start` command
#      - name: Install ChromeDriver
#        run: |
#          CHROME_VERSION=$(google-chrome --version | cut -f 3 -d ' ' | cut -d '.' -f 1) \
#            && CHROMEDRIVER_RELEASE=$(curl --location --fail --retry 3 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}) \
#            && curl --silent --show-error --location --fail --retry 3 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_RELEASE/chromedriver_linux64.zip" \
#            && cd /tmp \
#            && unzip chromedriver_linux64.zip \
#            && rm -rf chromedriver_linux64.zip \
#            && sudo mv chromedriver /usr/local/bin/chromedriver \
#            && sudo chmod +x /usr/local/bin/chromedriver \
#            && chromedriver --version
#      - uses: nanasess/setup-chromedriver@v1
#        with:
#          # Optional: do not specify to match Chrome's version
#          chromedriver-version: '88.0.4324.96'
      - name: Install Google Chrome
        run: |
          chmod +x ./scripts/InstallChrome.sh
          ./scripts/InstallChrome.sh
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Run tests with Gradle
        run: ./gradlew uiTest
      - name: Upload ui Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
            name: Test Results
            path: "**/build/test-results/uiTest/**/*.xml"


  publish-unit-test-results:
    name: "Publish Unit Tests Results"
    needs: unit-tests
    runs-on: macos-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: artifacts/**/*.xml

  publish-integration-test-results:
    name: "Publish Integration Tests Results"
    needs: integration-tests
    runs-on: macos-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish Integration Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: artifacts/**/*.xml

  publish-ui-test-results:
    name: "Publish UI Tests Results"
    needs: end-to-end-tests
    runs-on: macos-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Publish UI Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: artifacts/**/*.xml

plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = 'ru.spbstu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
	mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:1.7.26"

	implementation group: 'org.apache.lucene', name: 'lucene-core', version: '8.10.0'
	implementation group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.10.0'
	implementation group: 'org.apache.lucene', name: 'lucene-memory', version: '8.10.0'
    implementation group: 'org.apache.solr', name: 'solr-core', version: '8.10.0'

    implementation 'org.postgresql:postgresql:42.1.4'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation 'com.google.guava:guava:31.0.1-jre'

    implementation "redis.clients:jedis:3.0.1"
    implementation "com.intellij:annotations:12.0"
    implementation "com.google.guava:guava:27.0.1-jre"
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.8.0'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// https://mvnrepository.com/artifact/edu.uci.ics/crawler4j
	implementation 'edu.uci.ics:crawler4j:4.2'
	// https://mvnrepository.com/artifact/org.jsoup/jsoup
	implementation 'org.jsoup:jsoup:1.14.3'
}

sourceSets {
    test {
        java {
            srcDirs = ["src/test/junit"]
            outputDir = file("${buildDir}/testClasses")
        }
        resources {
            srcDirs = ["src/test/junit"]
        }
    }
    integrationTest {
        java {
            srcDirs = ["src/test/integration"]
            outputDir = file("${buildDir}/integrationTestClasses")
            compileClasspath += test.output
            compileClasspath += main.output
            compileClasspath += test.compileClasspath
        }
        resources {
            srcDirs = ["src/test/integration"]
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath
//    reports.junitXml.enabled = true
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
